<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Extra info about CRaC :: crac.org</title><link>https://crac.org/extra-info/index.html</link><description>Some more detailed info about CRaC is available on these pages:
Best Practices Debugging CPU Features File descriptor policies</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://crac.org/extra-info/index.xml" rel="self" type="application/rss+xml"/><item><title>Best Practices</title><link>https://crac.org/extra-info/best-practices/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://crac.org/extra-info/best-practices/index.html</guid><description>Best practices for implementing CRaC support in your application/library This guide assumes you are already familiar with the concepts and Resource API; please check out the step-by-step guide for those.
Implementing Resource as inner class In order to encapsulate the functionality, the Resource interface is sometimes not implemented directly by the component but we rather create an (anonymous) inner class. However it is not sufficient to pass this resource to the Context.</description></item><item><title>Debugging</title><link>https://crac.org/extra-info/debugging/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://crac.org/extra-info/debugging/index.html</guid><description>Debugging checkpoint and restore failures This guide will help you identify common problems when the checkpoint operation does not work.
Failures in native C/R When the checkpoint operation fails in the native part, there is usually little information in the stack trace of the exception:
CR: Checkpoint ... JVM: invalid info for restore provided: queued code -1 Exception in thread "main" jdk.crac.CheckpointException at java.base/jdk.crac.Core.checkpointRestore1(Core.java:159) at java.base/jdk.crac.Core.checkpointRestore(Core.java:264) at java.base/jdk.crac.Core.checkpointRestore(Core.java:249) at Main.main(Main.java:6)Currently the C/R depends on the CRIU project, particularly on the CRaC fork.</description></item><item><title>CPU Features</title><link>https://crac.org/extra-info/cpu-features/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://crac.org/extra-info/cpu-features/index.html</guid><description>CPU features differ from host to host as newer CPUs offer support for newer instructions, and some optional features may be removed over time. JVM (Java Virtual Machine) depends on CPU features (such as AVX512, SSE3 etc.) of each computer it is running on. The more CPU features JVM can use the better performance it can provide. JVM normally uses all the CPU features it can find on the CPU where it has started.</description></item><item><title>File descriptor policies</title><link>https://crac.org/extra-info/fd-policies/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://crac.org/extra-info/fd-policies/index.html</guid><description>CRaC requires that the application closes all open files, network connections etc. - on Linux these are represented as file descriptors. However, it might be difficult to alter the application to properly coordinate with the checkpoint, e.g. due to a code in a library you cannot modify. In those cases CRaC offers a limited handling via configuration. Note that this applies only to file descriptors opened through JDK API; anything opened through native code cannot be handled this way.</description></item></channel></rss>
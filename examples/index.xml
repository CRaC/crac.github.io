<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Example implementations :: crac.org</title><link>https://crac.org/examples/index.html</link><description>Some example implementations are available on these pages:
Jetty Quarkus Super Heroes</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://crac.org/examples/index.xml" rel="self" type="application/rss+xml"/><item><title>Jetty</title><link>https://crac.org/examples/jetty/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://crac.org/examples/jetty/index.html</guid><description>Step-by-step CRaC support for a Jetty app A program can be restored in a different environment compared to the one where it was checkpointed. Dependencies on the environment need to be detected and a coordination code need to be created to update the dependencies after restore. Such dependencies are open handles for operating system resources like files and sockets, cached hostname and environment, registration in remote services, …
For now, CRaC implementation checks for open files and sockets at the checkpoint.</description></item><item><title>Quarkus Super Heroes</title><link>https://crac.org/examples/super-heroes/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://crac.org/examples/super-heroes/index.html</guid><description>This guide will walk you through the process of taking an existing non-trivial application and getting it CRaC-able. The workshop describes the application, please refer there for any details. We’ll start right away with the result of that workshop:
Make sure that JAVA_HOME points to OpenJDK CRaC JDK, and ensure that CRaC works (CRIU has correct permissions etc). Checkout and build Super Heroes: git clone https://github.com/quarkusio/quarkus-workshops cd quarkus-workshops/quarkus-workshop-super-heroes ./mvnw clean package -DskipTests -Pcomplete Run the infrastructure: docker-compose -f super-heroes/infrastructure/docker-compose.</description></item></channel></rss>
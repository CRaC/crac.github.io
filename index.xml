<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Coordinated Restore at Checkpoint :: crac.org</title><link>https://crac.org/index.html</link><description>What is CRaC? Coordinated Restore at Checkpoint (CRaC) is a JDK project that allows you to start Java programs with a shorter time to first transaction, combined with less time and resources to achieve full code speed.
CRaC IN YOUR CODE USING CRaC
CRaC API 1.4.0 NOW AVAILABLE Why CRaC? The CRaC (Coordinated Restore at Checkpoint) Project researches the coordination of Java programs with mechanisms to checkpoint (make an image of, snapshot) a Java instance while executing.</description><generator>Hugo</generator><language>en-us</language><atom:link href="https://crac.org/index.xml" rel="self" type="application/rss+xml"/><item><title>About CRaC</title><link>https://crac.org/about/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://crac.org/about/index.html</guid><description>Several frameworks provide CRaC functionality out-of-the-box.
What is Coordinated Restore at Checkpoint? Startup Improvement Results OpenJDK CRaC Project</description></item><item><title>Using CRaC</title><link>https://crac.org/use/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://crac.org/use/index.html</guid><description> CRaC deployment scheme reflects the need to collect data required for Java application initialization and warm-up.
a Java application (or container) is deployed in the canary environment the app processes canary requests that triggers class loading and JIT compilation the running application is checkpointed by some mean this creates the image of the JVM and application; the image is considered as a part of a new deployment bundle the Java application with the image are deployed in the production environment the restored Java process uses loaded classes from and JIT code from the immediately Read more Implementing CRaC in your Application Java Runtime with CRaC Support Creating a Checkpoint and Restoring from Checkpoint</description></item><item><title>Example implementations</title><link>https://crac.org/examples/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://crac.org/examples/index.html</guid><description>Some example implementations are available on these pages:
Jetty Quarkus Super Heroes</description></item><item><title>Frameworks with CRaC integration</title><link>https://crac.org/frameworks/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://crac.org/frameworks/index.html</guid><description>Proof-of-Concept CRaC support implementation Proof-of concept CRaC support was implemented in a few third-party frameworks and libraries.
Source code links are below. Builds can be found in Maven Central under io.github.crac artifact-id.
Frameworks Several frameworks provide CRaC functionality out-of-the-box.
SpringBoot Quarkus Micronaut AWS Lambda</description></item><item><title>Extra info about CRaC</title><link>https://crac.org/extra-info/index.html</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://crac.org/extra-info/index.html</guid><description>Some more detailed info about CRaC is available on these pages:
Best Practices Debugging CPU Features File descriptor policies</description></item></channel></rss>